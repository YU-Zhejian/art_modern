/**
 * Copyright 2024-2025 YU Zhejian <yuzj25@seas.upenn.edu>
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 **/

#include "art_modern_config.h" // NOLINT: For WITH_MPI

#include "libam_support/Constants.hh"
#include "libam_support/utils/log_utils.hh"

#ifdef WITH_MPI
#include "libam_support/utils/mpi_log_attributes.hh"
#endif

#include "libam_support/utils/mpi_utils.hh"

#include <boost/filesystem/operations.hpp>
#include <boost/log/attributes/clock.hpp>
#include <boost/log/attributes/current_thread_id.hpp>
#include <boost/log/core/core.hpp>
#include <boost/log/keywords/file_name.hpp>
#include <boost/log/keywords/filter.hpp>
#include <boost/log/keywords/format.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/utility/setup/console.hpp>
#include <boost/log/utility/setup/file.hpp>

#include <iostream>
#include <sstream>
#include <string>

namespace logging = boost::log;
namespace expr = logging::expressions; // NOLINT

namespace labw::art_modern {

void init_logger()
{
    const auto core = logging::core::get();
    core->remove_all_sinks();
    core->add_global_attribute("TimeStamp", boost::log::attributes::local_clock());
    core->add_global_attribute("ThreadID", boost::log::attributes::current_thread_id());
#ifdef WITH_MPI
    core->add_global_attribute("MPIRank", MPIRankLoggerAttribute());
    core->add_global_attribute("MPIHostName", MPIHostNameLoggerAttribute());
    // Add console sink for MPI process with rank 0
    if (mpi_rank() == MPI_MAIN_RANK_STR) {
        const auto sink = add_console_log(std::cerr,
            boost::log::keywords::format
            = "[%TimeStamp%] [T=%ThreadID%@MPI=%MPIRank%:%MPIHostName%] %Severity%: %Message%",
            logging::keywords::filter = (logging::trivial::severity >= logging::trivial::info));
        core->add_sink(sink);
    }
#else
    const auto sink = add_console_log(std::cerr,
        boost::log::keywords::format = "[%TimeStamp%] [T=%ThreadID%] %Severity%: %Message%",
        logging::keywords::filter = logging::trivial::severity >= logging::trivial::info);
    core->add_sink(sink);
#endif
}
void init_file_logger()
{
    if (std::getenv("ART_NO_LOG_DIR") != nullptr) {
#ifdef WITH_MPI
        if (mpi_rank() == MPI_MAIN_RANK_STR) {
            BOOST_LOG_TRIVIAL(warning) << "ART_NO_LOG_DIR is set; No log directory will be created.";
            BOOST_LOG_TRIVIAL(warning) << "All logs generated by MPI process with rank 1, 2, ... will be LOST.";
        }
#else
        BOOST_LOG_TRIVIAL(warning) << "ART_NO_LOG_DIR defined; No log directory will be created.";
#endif
    } else {
        const char* art_log_dir_c = std::getenv("ART_LOG_DIR");
        std::string art_log_dir;
        if (art_log_dir_c == nullptr) {
#ifdef WITH_MPI
            if (mpi_rank() == MPI_MAIN_RANK_STR) {
#endif
                BOOST_LOG_TRIVIAL(warning) << "ART_LOG_DIR not defined; Default to 'log.d'.";
#ifdef WITH_MPI
            }
#endif
            art_log_dir = "log.d";
        } else {
            art_log_dir = art_log_dir_c;
        }
        if (!boost::filesystem::exists(art_log_dir)) {
            boost::filesystem::create_directories(art_log_dir);
        }
        std::stringstream file_name_ss;
        file_name_ss << art_log_dir << "/" << mpi_rank() << ".log";
        logging::add_file_log(logging::keywords::file_name = file_name_ss.str(),
            logging::keywords::format
            = "[%TimeStamp%] [T=%ThreadID%@MPI=%MPIRank%:%MPIHostName%] %Severity%: %Message%");
    }
}
} // namespace labw::art_modern
